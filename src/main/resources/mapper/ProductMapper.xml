<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.air.mapper.ProductMapper">

<resultMap id="schedResultMap" type="kr.co.air.dtos.SchedDto">
    <id property="scheduleIdx" column="SCHEDULE_IDX"/>
    <result property="airportCd" column="AIRPORT_CD"/>
    <result property="airlineNm" column="AIRLINE_NM"/>
    <result property="flightCd" column="FLIGHT_CD"/>
    <result property="flightNm" column="FLIGHT_NM"/>
    <result property="departureNm" column="DEPARTURE_NM"/>
    <result property="arrivalNm" column="ARRIVAL_NM"/>
    <result property="totalSeats" column="TOTAL_SEATS"/>
    <result property="flightStatus" column="FLIGHT_STATUS"/>
    <!-- 'seatTypes'라는 List 필드에 여러 좌석 정보를 그룹화하여 담습니다. -->
    <collection property="seatTypes" ofType="kr.co.air.dtos.SeatDto">
        <id property="seatIdx" column="SEAT_TYPE_IDX"/>
        <result property="seatTypeName" column="SEAT_TYPE_NM"/>
        <result property="seatTypePrice" column="SEAT_TYPE_PRICE"/>
        <result property="seatCount" column="SEAT_COUNT"/>
    </collection>
</resultMap>

<resultMap id="airCodeResultMap" type="kr.co.air.dtos.AirCodeDto">
    <id property="airIdx" column="AIR_IDX"/>
    <result property="airportCode" column="AIRPORT_CD"/>
    <result property="airlineName" column="AIRLINE_NM"/>
    <result property="flightCode" column="FLIGHT_CD"/>
    <result property="flightName" column="FLIGHT_NM"/>
    <result property="useStatus" column="USE_STATUS"/>
    <result property="createDate" column="CREATE_DATE"/>
</resultMap>

<!-- 항공편 데이터 리스트 출력 -->
<select id="findAllProduct" parameterType="map" resultMap="schedResultMap">
    SELECT
        fs.SCHEDULE_IDX,
        fs.AIRPORT_CD,
        fs.AIRLINE_NM,
        fs.FLIGHT_CD,
        fs.FLIGHT_NM,
        fs.DEPARTURE_NM,
        fs.ARRIVAL_NM,
        fs.TOTAL_SEATS,
        fs.FLIGHT_STATUS,
        fst.SEAT_TYPE_IDX,
        fst.SEAT_TYPE_NM,
        fst.SEAT_TYPE_PRICE,
        fst.SEAT_COUNT
    FROM FLIGHT_SCHEDULES fs
    LEFT JOIN FLIGHT_SEAT_TYPES fst ON fs.SCHEDULE_IDX = fst.SCHEDULE_IDX
    <where>
        <if test="searchKeyword != null and searchKeyword != ''">
            <choose>
                <when test="searchType == 'airline_name'">
                    AND fs.AIRLINE_NM LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="searchType == 'airline_code'">
                    AND fs.AIRPORT_CD LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
            </choose>
        </if>
    </where>
    ORDER BY fs.SCHEDULE_IDX DESC, fst.SEAT_TYPE_IDX ASC
</select>

<!-- 항공편 데이터 등록 -->
<insert id="insertFlightSchedule" parameterType="kr.co.air.dtos.SchedDto"
        useGeneratedKeys="true" keyProperty="scheduleIdx" keyColumn="SCHEDULE_IDX">
    INSERT INTO FLIGHT_SCHEDULES (
        AIRPORT_CD, AIRLINE_NM, FLIGHT_CD, FLIGHT_NM,
        DEPARTURE_NM, ARRIVAL_NM, TOTAL_SEATS, FLIGHT_STATUS
    ) VALUES (
        #{airportCd}, #{airlineNm}, #{flightCd}, #{flightNm},
        #{departureNm}, #{arrivalNm}, #{totalSeats}, #{flightStatus}
    )
</insert>

<insert id="insertFlightSeatTypes" parameterType="java.util.List">
    INSERT INTO FLIGHT_SEAT_TYPES (
        SCHEDULE_IDX, SEAT_TYPE_NM, SEAT_TYPE_PRICE, SEAT_COUNT
    ) VALUES
    <foreach collection="list" item="seat" separator=",">
        (#{seat.schedIdx}, #{seat.seatTypeName}, #{seat.seatTypePrice}, #{seat.seatCount})
    </foreach>
</insert>

<!-- 공항코드 목록 조회 -->
<select id="findDistinctAirportCodes" resultType="String">
    SELECT DISTINCT AIRPORT_CD
    FROM AIR_CODES
    WHERE USE_STATUS = 'Y'
    ORDER BY AIRPORT_CD
</select>

<!-- 특정 공항의 항공사 목록 조회 -->
<select id="findAirlinesByAirport" parameterType="String" resultType="String">
    SELECT DISTINCT AIRLINE_NM
    FROM AIR_CODES
    WHERE AIRPORT_CD = #{airportCode} AND USE_STATUS = 'Y'
    ORDER BY AIRLINE_NM
</select>

<!-- 특정 공항과 항공사의 항공편 정보 조회 - resultMap 사용으로 수정 -->
<select id="findFlightInfo" parameterType="map" resultMap="airCodeResultMap">
    SELECT
        AIR_IDX,
        AIRPORT_CD,
        AIRLINE_NM,
        FLIGHT_CD,
        FLIGHT_NM,
        USE_STATUS,
        CREATE_DATE
    FROM AIR_CODES
    WHERE AIRPORT_CD = #{airportCode}
      AND AIRLINE_NM = #{airlineName}
      AND USE_STATUS = 'Y'
      AND FLIGHT_CD NOT IN (SELECT FLIGHT_CD FROM FLIGHT_SCHEDULES)
    ORDER BY FLIGHT_CD
</select>

    <!-- ID로 특정 항공편과 모든 좌석 정보 조회 -->
    <select id="findScheduleById" parameterType="int" resultMap="schedResultMap">
        SELECT
            fs.SCHEDULE_IDX, fs.AIRPORT_CD, fs.AIRLINE_NM, fs.FLIGHT_CD, fs.FLIGHT_NM,
            fs.DEPARTURE_NM, fs.ARRIVAL_NM, fs.TOTAL_SEATS, fs.FLIGHT_STATUS,
            fst.SEAT_TYPE_IDX, fst.SEAT_TYPE_NM, fst.SEAT_TYPE_PRICE, fst.SEAT_COUNT
        FROM FLIGHT_SCHEDULES fs
        LEFT JOIN FLIGHT_SEAT_TYPES fst ON fs.SCHEDULE_IDX = fst.SCHEDULE_IDX
        WHERE fs.SCHEDULE_IDX = #{scheduleIdx}
    </select>

    <!-- 항공편 기본 정보 업데이트 -->
    <update id="updateFlightSchedule" parameterType="kr.co.air.dtos.SchedDto">
        UPDATE FLIGHT_SCHEDULES
        SET
            AIRPORT_CD = #{airportCd},
            AIRLINE_NM = #{airlineNm},
            FLIGHT_CD = #{flightCd},
            FLIGHT_NM = #{flightNm},
            DEPARTURE_NM = #{departureNm},
            ARRIVAL_NM = #{arrivalNm},
            TOTAL_SEATS = #{totalSeats},
            FLIGHT_STATUS = #{flightStatus}
        WHERE SCHEDULE_IDX = #{scheduleIdx}
    </update>
    <!-- 특정 항공편에 속한 좌석 정보 모두 삭제 -->
    <delete id="deleteSeatTypesByScheduleId" parameterType="int">
        DELETE FROM FLIGHT_SEAT_TYPES WHERE SCHEDULE_IDX = #{scheduleIdx}
    </delete>

<delete id="deleteitemById">
    DELETE FROM FLIGHT_SCHEDULES
    WHERE SCHEDULE_IDX IN
    <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
</delete>

</mapper>